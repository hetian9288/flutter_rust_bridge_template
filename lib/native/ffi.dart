// This file initializes the dynamic library and connects it with the stub
// generated by flutter_rust_bridge_codegen.

import 'dart:ffi';

import 'package:flutter_rust_bridge_template/native/bridge_generated_api_order.dart';
import 'package:flutter_rust_bridge_template/native/bridge_generated_api_user.dart';

// Re-export the bridge so it is only necessary to import this file.
import 'dart:io' as io;

const _base = 'rust_plugin';

// On MacOS, the dynamic library is not bundled with the binary,
// but rather directly **linked** against the binary.
final _dylib = io.Platform.isWindows ? '$_base.dll' : 'lib$_base.so';

DynamicLibrary? _dynamicLibrary;

DynamicLibrary _openDynamicLibrary() {
  _dynamicLibrary ??= io.Platform.isIOS || io.Platform.isMacOS
      ? DynamicLibrary.executable()
      : DynamicLibrary.open(_dylib);
  return _dynamicLibrary!;
}

// 这里需要手动
final ApiUser apiUser = ApiUserImpl(_openDynamicLibrary());
final ApiOrder apiOrder = ApiOrderImpl(_openDynamicLibrary());
